class Solution {
public:
    void helper(vector<int>&nums,vector<int>&ds,vector<int>&vec,vector<vector<int>>&store){
        if(ds.size()==nums.size()){
            store.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(i>0&&nums[i]==nums[i-1]&&vec[i-1]!=1) continue;//skips duplicates only when its previous copy is not used
            if(!vec[i]){
                ds.push_back(nums[i]);
                vec[i]=1;
                helper(nums,ds,vec,store);
                vec[i]=0;
                ds.pop_back();
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<int>ds;
        vector<int>vec(n,0);
        vector<vector<int>>store;
        helper(nums,ds,vec,store);
        return store;
    }
};
