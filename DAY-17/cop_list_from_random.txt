/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/


class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return nullptr;
    Node*temp=head;
    while(temp){
        Node*New=new Node(temp->val);
        New->next=temp->next;
        temp->next=New;
        temp=temp->next->next;
    }
    temp=head;
    while(temp){
        Node*copy=temp->next;
        if(temp->random){
            copy->random=temp->random->next;
        }
        else{
            copy->random=NULL;
        }
        temp=temp->next->next;
    }
    temp=head;
    Node*ans=temp->next;
    while(temp){
        Node*copy=temp->next;
        temp->next=copy->next;
        if(temp->next){
            copy->next=temp->next->next;
        }
        else{
            copy->next=NULL;
        }
        temp=temp->next;
    }
    return ans;
    }
};