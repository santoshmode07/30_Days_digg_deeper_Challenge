class MyCircularQueue {
public:
    vector<int> arr;
    int front, rear;
    MyCircularQueue(int k) {
        arr.resize(k);
        front=-1;
        rear=-1;
    }
    
    bool enQueue(int value) {
        int n=arr.size();
        if(rear==-1){
            rear++;
            arr[rear]=value;
            front=rear;
            return true;
        }
        else{
            if((n+rear+1)%n!=front){
                rear=(n+rear+1)%n;
                arr[rear]=value;
                return true;
            }
        }
        return false;
    }
    
    bool deQueue() {
        int n=arr.size();
        if(front==-1){
            return false;
        }
        if(front==rear){
            front=rear=-1;
            return true;
        }
        front=(n+front+1)%n;
        return true;
    }
    
    int Front() {
        if(front==-1) return front;
        return arr[front];
    }
    
    int Rear() {
        if(rear==-1) return rear;
        return arr[rear];
    }
    
    bool isEmpty() {
        if(front==-1&&rear==-1) return true;
        return false;
    }
    
    bool isFull() {
        int n=arr.size();
        if((n+rear+1)%n==front){
            return true;
        }
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */